services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: apace_ticket
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../apps/api/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=apace_ticket
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=4000
      - JWT_SECRET=dev-secret-replace-in-production
      - FRONTEND_URL=http://web:3000
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../apps/api:/app
      - /app/node_modules
    command: sh -c "npm run migration:run && npm run seed && npm run start:dev"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: ../apps/web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ../apps/web:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"

volumes:
  postgres_data:
  redis_data:
